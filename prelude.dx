fst :: (a, b) -> a
fst (x, y) = x

snd :: (a, b) -> b
snd (x, y) = y

iadd :: Int -> Int -> Int
iadd x y = %iadd(x, y)

isub :: Int -> Int -> Int
isub x y = %isub(x, y)

imul :: Int -> Int -> Int
imul x y = %imul(x, y)

todo :: a
todo = %todo()

mod :: Int -> Int -> Int
mod x y = %mod(x, y)

fadd :: Real -> Real -> Real
fadd x y = %fadd(x, y)

fsub :: Real -> Real -> Real
fsub x y = %fsub(x, y)

fmul :: Real -> Real -> Real
fmul x y = %fmul(x, y)

fdiv :: Real -> Real -> Real
fdiv x y = %fdiv(x, y)

pow :: Int -> Int -> Int
pow x y = %pow(x, y)

exp :: Real -> Real
exp x = %%exp(x)

log :: Real -> Real
log x = %%log(x)

sqrt :: Real -> Real
sqrt x = %%sqrt(x)

sin :: Real -> Real
sin x = %%sin(x)

cos :: Real -> Real
cos x = %%cos(x)

tan :: Real -> Real
tan x = %%tan(x)

floor :: Real -> Int
floor x = %%floorDex(x)

pi :: Real
pi = 3.141592653589793

type Key = Int

hash :: Key -> Key -> Key
hash x y = %%threefry2x32(x, y)

splitKey :: Key -> (Key, Key)
splitKey key = (hash key 0, hash key 1)

asint :: i -> Int
asint i = %asint(i)

asidx :: Int -> i
asidx i = %asidx(i)

ixkey :: Key -> n -> Key
ixkey x i = hash x (asint i)

ixadd :: i -> Int -> i
ixadd i n = asidx $ iadd (asint i) n

ixsub :: i -> Int -> i
ixsub i n = asidx $ isub (asint i) n

iota :: i=>Int
iota = for i. asint i

range :: Int -> E i. ()
range n = %range(n)

real :: Int -> Real
real x = %inttoreal(x)

b2i :: Bool -> Int
b2i x = %booltoint(x)

b2r :: Bool -> Real
b2r x = real $ b2i x

filter :: (a -> Bool) -> i=>a -> E j. j=>a
filter f x = %filter(f, x)

dup :: a -> (a, a)
dup x = (x, x)

scan :: a -> i=>(a->(a, b)) -> (a, i=>b)
scan x0 fs = %scan(x0, for i. lam x. fs.i x)

fold :: a -> i=>(a->a) -> a
fold x0 fs = fst $ scan x0 for i. lam x. (fs.i x, ())

rand :: Key -> Real
rand x = %%randunif(x)

randn :: Key -> Real
randn k =
  (k1, k2) = splitKey k
  u1 = rand k1
  u2 = rand k2
  sqrt (-2.0 * log u1) * cos (2.0 * pi * u2)

many :: A n a. (Key -> a) -> Key -> n=>a
many f key = for i. f (hash key (asint i))

sum :: i=>Real -> Real
sum xs = fold 0.0 for i. x = xs.i; lam c. c + x

isum :: i=>Int -> Int
isum xs = fold 0 for i. x = xs.i; lam c. iadd c x

map :: (a -> b) -> i=>a -> i=>b
map f xs = for i. f xs.i

map2 :: (a -> b) -> i=>j=>a -> i=>j=>b
map2 f xs = for i j. f xs.i.j

zip :: i=>a -> i=>b -> i=>(a,b)
zip xs ys = for i. (xs.i, ys.i)

unzip :: i=>(a, b) -> (i=>a, i=>b)
unzip xys = (map fst xys, map snd xys)

fanout :: A i a. a -> i=>a
fanout x = for i. x

-- TODO: make this a builtin for efficiency
size :: A i. Int
size = isum (fanout @i 1)

linspace :: A n. Real -> Real -> n=>Real
linspace low high = dx = (high - low) / real (size @n)
                    for i::n. low + real (asint i) * dx

mean :: A n. n=>Real -> Real
mean xs = sum xs / real (size @n)

sq :: Real -> Real
sq x = x * x

std :: A n. n=>Real -> Real
std xs = sqrt $ mean (map sq xs) - sq (mean xs)

randIdx :: A n. Key -> n
randIdx key =
  unif = rand key
  asidx $ floor $ unif * real (size @n)

-- All of the following have implicit vector space typeclass constraints on `a`
--  and `b`. TODO: make some sort of typeclass system

vzero :: a
vzero = %vzero()

vadd :: a -> a -> a
vadd x y = %vadd(x, y)

vsingle :: i -> a -> i=>a
vsingle i x = %vsingle(i, x)

vsum :: i=>a -> a
vsum xs = %vsum(for i. xs.i)

partialEval :: (a -> b -> (c,d)) -> a -> (c, b -> d)
partialEval f = %partialEval(lam x y. f x y)

deriv :: (a -> b) -> a -> a -> (b, b)
deriv f y t = %deriv(lam x. f x) (y, t)

linearize :: (a -> b) -> a -> (b, a -> b)
linearize f = partialEval (deriv f)

jvp :: (a -> b) -> a -> a -> b
jvp f x t = snd (linearize f x) t

linearTranspose :: (a -> b) -> b -> a
linearTranspose f = %linearTranspose(lam t. f t)

vjp :: (a -> b) -> a -> (b, b -> a)
vjp f x = (y, df) = linearize f x
          (y, linearTranspose df)

grad :: (a -> Real) -> a -> a
grad f x = (_, pullback) = vjp f x
           pullback 1.0

fmulDeriv :: Real -> Real -> (Real, Real -> Real -> Real)
fmulDeriv x y = (x * y, lam tx ty. x * ty + y * tx)

vsumImpl :: i=>a -> a
vsumImpl xs = fold vzero for i::i. lam c. vadd c xs.i

forUnzip :: i=>(b, a -> b) -> (i=>b, a -> i=>b)
forUnzip xfs = (xs, fs) = unzip xfs
               (xs, lam t. for i. fs.i t)
