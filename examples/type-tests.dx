:t lam x. x
> A a. (a -> a)

:t lam x. sum for i. x.i
> A a. ((a=>Real) -> Real)

:t lam f x y. f y x
> A c b a. ((b -> (a -> c)) -> (a -> (b -> c)))

:t lam x. for i j. x.j.i
> A c b a. ((b=>(a=>c)) -> (a=>(b=>c)))

:t lam f x. f x
> A b a. ((a -> b) -> (a -> b))

:t id :: a -> a
   id x = x
   id (id) (id 1)
> Int

:t _, N = unpack range 10
   x = (iota :: N=>Int)
   isum x
> Int

:t _, Nx = unpack range 10
   _, Ny = unpack range 3
   x = iota @ Nx
   y = (iota :: Ny=>Int)
   real (isum for i. x.i) + real (isum for j. y.j)
> Real

:t _, Nx = unpack range 10
   _, Ny = unpack range 3
   x = iota @ Nx
   y = (iota :: Ny=>Int)
   sum for i. iadd x.i y.i
> Type error:
> Expected: Ny
>   Actual: Nx
> In: i
>
>    sum for i. iadd x.i y.i
>                          ^

:t _, Nx = unpack range 10
   (iota :: Nx=>Int)
> Type error:
> Leaked type variable: Nx

_, Narr = unpack range 10

arr = iota @ Narr

xr = map real arr

:t arr
> (Narr=>Int)

:t (lam (x, y). x + y) (1.0, 2.0)
> Real

:t f (x, y) = x + 2.0 * y
   z.i = (xr.i, xr.i * xr.i)
   sum (for i. f z.i)
> Real

-- yields 'compiler bug'. Should be a different sort of error
-- :t unpack x = iota 3
--    in let y = for i j. x.i * x.i
--       in sum (for i. sum (y.i))
:t 1 :: Int
> Int

:t 1.0 :: Int
> Type error:
> Expected: Int
>   Actual: Real
> In: 1.0
>
> :t 1.0 :: Int
>    ^^^^

:t [1, 2, 3]
> (3=>Int)

:t []
> A a. (0=>a)

:t [1, [2]]
> Type error:
> Expected: Int
>   Actual: (?_3=>?_4)
> In: [2]
>
> :t [1, [2]]
>        ^^^

:t [[1, 2], [3, 4]]
> (2=>(2=>Int))

:t [[1, 2], [3]]
> Type error:
> Expected: (2=>Int)
>   Actual: (1=>Int)
> In: [3]
>
> :t [[1, 2], [3]]
>             ^^^

type Pair = (Int, Int)

p1 :: Pair
p1 = (1, 2)

p2 :: Pair
p2 = 1
> Type error:
> Expected: (Int, Int)
>   Actual: Int
> In: 1
>
> p2 = 1
>      ^

:t lam x. for (i,j). x.i.j
> A c b a. ((b=>(a=>c)) -> ((b, a)=>c))

_, M = unpack range 5


:t for i::M. _, N = unpack range (asint i)
             x = for j::N. asint j
             pack x, N, E n. n=>Int
> (M=>(Ea.(a=>Int)))

idfun :: a -> a
idfun x = x

:t idfun @ Real
> (Real -> Real)

:t lam x. f :: a -> a; f y = x; ()
> Type error:
> Leaked type variable: a

:t (todo :: Int -> Real) 1
> Real

f :: Int -> Real
f x =
  z = x + 1.0
  x
> Type error:
> Expected: Real
>   Actual: Int
> In: x
>
>   z = x + 1.0
>       ^^
:t x = 3
   for i::x. 0
> Error: variable not in scope: type variable "x" (a term variable of the same name is in scope)

:p lam x::Real. x
> Type error: Can't print values of type: (Real -> Real)

vspaceid :: A a::VSpace. a -> a
vspaceid x = x

:tycheck vspaceid (1.0, [2.0, 3.0])
> (Real, (2=>Real))

:tycheck vspaceid 0
> Type error: Not a vector space: Int
> context:
> (vspaceid @Int 0)

:tycheck ..
  g :: A a::VSpace. a -> a
  g x = vspaceid x
  g @Real
> (Real -> Real)

:tycheck ..
  g :: a -> a
  g x = vspaceid x
  g @Real
> Type error: Type variable "a" not in class: VSpace
> context:
> (g :: A a. (a -> a)
> g = (lam x::a . (vspaceid @a x));
> g @Real)
