
:p iadd 3 (iadd 4 5)
> 12

def depId (a:Type) (x:a) : a = x

:p depId Int 1
> 1

def returnFirstArg (a:Type) (b:Type) (x:a) (y:b) : a = x

:p returnFirstArg Int Real 1 2.0
> 1

:p 1.0 + 2.0
> 3.0

def triple (x:Real) : Real = x + x + x

:p triple 1.0
> 3.0

def idExplicit (a:Type) (x:a) : a = x

:p idExplicit Int 1
> 1

def idImplicit (a:Type) ?-> (x:a) : a = x
:p idImplicit 1
> 1

idImplicit2 : (a:Type ?-> a -> a) = \x. x
:p idImplicit2 1
> 1

:p
  idImplicit3 : (a:Type ?-> a -> a) = \x. x
  idImplicit3 1
> 1

:p (\x y. x + y) 1.0 2.0
> 3.0

:p 1.0 + 1
> Type error:
> Expected: Real
>   Actual: Int
>
> :p 1.0 + 1
>          ^

:p iadd 1 (1.0 + 2.0)
> Type error:
> Expected: Int
>   Actual: Real
>
> :p iadd 1 (1.0 + 2.0)
>            ^^^^^^^^^

:p 1.0 + (iadd 2 3)
> Type error:
> Expected: Real
>   Actual: Int
>
> :p 1.0 + (iadd 2 3)
>           ^^^^^^^^

:p x + x
> Error: variable not in scope: x

iadd = 1
> Error: variable already defined: iadd

def TyId (a:Type) : Type = a
:p
  x:(TyId Int) = 1
  x
> 1

:p
  def TyId2 (a:Type) : Type = a
  x:(TyId2 Int) = 1
  x
> 1

def tabId (n:Type) ?-> (x:n=>Int) : n=>Int = for i. x.i

-- bug: this doesn't work if we split it across top-level decls
:p
  xs = for i:(Fin 3) . 1
  tabId xs
> [1, 1, 1]

myPair = (1, 2.3)

:p fst myPair
> 1

:p
   snd $ withState 2 \s.
     x = get s
     s := iadd x 3
> 5

:p
   snd $ withState 1 \s.
     for i:(Fin 10).
       x = get s
       s := iadd x x
> 1024

:p
 x:Unit = ()
 x
> ()

:p [1,2,3]
> [1, 2, 3]

:p [] : Fin 0 => Int
> []

:p sin 1.0
> 0.84147096

:p
  (x,y) = (1,2)
  (x,y)
> (1, 2)

:p
  (x,y,z) = (1,2,3)
  (x,y,z)
> (1, (2, 3))

:p
  ((x,y),z) = (1,2,3)
  ((x,y),z)
> Type error:
> Expected: (a ** b)
>   Actual: Int
> Solving for: [a:Type, b:Type]
>
>   ((x,y),z) = (1,2,3)
>     ^^^

:p
  (x,(y,z)) = (1,2,3)
  (x,(y,z))
> (1, (2, 3))

:p
  (x,y) = 1
  (x,y)
> Type error:
> Expected: (a ** b)
>   Actual: Int
> Solving for: [a:Type, b:Type]
>
>   (x,y) = 1
>    ^^^

:p
  snd $ withState [1,2,3] \xsRef.
    for i:(Fin 3).
      xsRef!i := asint i
> [0, 1, 2]

def passthrough (eff:Effects) ?-> (f:(a -> {|eff} b)) (x:a) : {|eff} b = f x

:p
  snd $ withState 1 \ref.
    passthrough (\(). ref := 10) ()
> 10

:p
  withState 0 \r1.
    withState 0 \r2.
      r1 := 1
      r2 := 2
> (((), 2), 1)
