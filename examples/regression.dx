'# Basis function regression

vdot :: n=>Real -> n=>Real -> Real
vdot x y = sum for i. x.i * y.i

mmp :: l=>m=>Real -> m=>n=>Real -> l=>n=>Real
mmp m1 m2 = for i k. sum for j. m1.i.j * m2.j.k

mvp :: n=>m=>Real -> m=>Real -> n=>Real
mvp m v = for i. vdot m.i v

transpose :: n=>m=>Real -> m=>n=>Real
transpose x = for i j. x.j.i

inner :: n=>Real -> n=>m=>Real -> m=>Real -> Real
inner x m y = sum for (i,j). x.i * m.i.j * y.j

solve :: A M. M=>M=>Real -> M=>Real -> M=>Real
solve mat b =
  x0 = for i::M. 0.0 * b.i  -- Workaround imp lowering bug
  ax = mvp mat x0
  r0.i = b.i - ax.i
  p0 = r0
  (xOut, _, _) = fold (x0, r0, p0) ..
     for s::M. lam (x, r, p).
       ap = mvp mat p
       alpha = vdot r r / vdot p ap
       x'.i = x.i + alpha * p.i
       r'.i = r.i - alpha * ap.i
       beta = vdot r' r' / (vdot r r + 0.000001)
       p'.i = r'.i + beta * p.i
       (x', r', p')
  xOut


regress :: n=>d=>Real -> n=>Real -> d=>Real
regress x y =
  xT = transpose x
  solve (mmp xT x) (mvp xT y)

'Make some synthetic data

type Nx = 100
noise = 0.1
(k1, k2) = splitKey 0

trueFun :: Real -> Real
trueFun x = sin (3.5 * x)

xs :: Nx=>Real
xs.i = rand (ixkey k1 i)

ys :: Nx=>Real
ys.i = trueFun xs.i + noise * randn (ixkey k2 i)

featurize :: Real -> 3=>Real
featurize x = [1.0, x, sq x]

:plot zip xs ys

params = regress (map featurize xs) ys

ysPred.i = vdot params (featurize xs.i)

:plot zip xs ys

:plot zip xs ysPred


-- Top-level variable naming bug
-- xsf = map featurize xs
-- parammat' = mmp (transpose xsf) xsf
-- paramb = mvp (transpose xsf) ys

-- :simp parammat'
-- :p paramb
-- :p solve parammat' paramb
