'# Introduction to the Dex language

'Dex is a functional, statically typed language for array processing.
Here we introduce the language in a tutorial style. We assume
reading familiarity with languages in the Haskell/ML family, and with
array programming in the MATLAB/NumPy style.
This document is a literate program. You can follow along in the REPL
(run `dex repl`) or with the live notebook (`dex web examples/tutorial.dx`).

'## Getting started

'We can evaluate and print expressions with `:p`

:p (1.0 + 2.0) * 3.0
> 101.0

'Why did we write `1.0` instead of just `1`? Let's try that:

-- :p (1 + 2) * 3

'We can query the *type* of an expression with `:t`. Here's a pair of a real
 number and an integer. (Note that Dex types don't include floating point
 precision. See XXX.)

:t (12.3, 42)
> (Real, Int)

'The central data structure in Dex is the 'table'. We could also
call it an 'array' or 'vector'. Let's make one:

xs = [[1,2],[3,4],[5,6]]

:p xs
> [[1, 2], [3, 4], [5, 6]]
:t xs
> (3=>(2=>Int))

'this is a type error:

:p 1 1
> Type error:
> Expected: Int
>   Actual: (?_2 -> ?_3)
> In: 1

'TODO: table types
  * for expression
  * syntactic sugar of `x.i = ...`
  * index polymorphism in function like `dot`
  * for i::N. ___  annotated for expressions
  * visible type application
  * structured index sets like pairs
  * pack/unpacking
  * Precision

