
:p m :: () -> {#s :: State Int} Int
   m () = get @#s ()
   runState @#s 2 m
> (2, 2)

:p m :: () -> {#s :: State Int} ()
   m () = put @#s 3
   runState @#s 0 m
> ((), 3)

:p m :: () -> {#r :: Reader Int} Int
   m () = ask @#r ()
   runReader @#r 5 m
> 5

:p
  stateAction :: () -> {#s :: State Real} ()
  stateAction () =
     x = get @#s ()
     y = put @#s (x + 2.0)
     z = get @#s ()
     put @#s (z * 3.0)
  --
  runState @#s 1.0 stateAction
> ((), 9.0)

:p
  rwsAction :: () -> {#r :: Reader Int, #w :: Writer Real, #s :: State Bool} Int
  rwsAction () =
    x = get  @#s ()
    _ = tell @#w 2.0
    _ = put  @#s (not x)
    r = ask  @#r ()
    _ = tell @#w 4.0
    (r `iadd` 2)
  --
  runReader @#r 2 $ lam (). runState @#s True $ lam (). runWriter @#w rwsAction
> ((4, 6.0), False)

:p m :: () -> {#s :: State (3=>Int)} ()
   m () =
     _ = indexState @#s 0@3 lam (). put @#s 10
     _ = indexState @#s 2@3 lam (). put @#s 20
     x = indexState @#s 0@3 lam (). get @#s ()
     indexState     @#s 1@3 lam (). put @#s x
   runState @#s [0,0,0] m
> ((), [10, 10, 20])

:p m :: () -> {#r :: Reader (3=>Int)} Int
   m () = indexReader @#r (1@3) lam (). ask @#r ()
   runReader @#r [1,2,3] m
> 2

:p
  m :: () -> {#w :: Writer Real, #s :: State Real} ()
  m () =
    x = get @#s ()
    tell @#w x
  runState @#s 1.0 $ lam (). runWriter @#w m
> (((), 1.0), 1.0)

myAction:: () -> {#r :: Reader Real, #w :: Writer Real} ()
myAction () =
  _ = tell @#w 1.0
  _ = tell @#w 2.0
  ()

:p runReader @#r 1.0 $ lam (). runWriter @#w myAction
> ((), 3.0)

:p
  m :: () -> {#w1 :: Writer Real, #w2 :: Writer Real} ()
  m () =
    _ = tell @#w1 1.0
    _ = tell @#w2 3.0
    tell @#w1 1.0
  runWriter @#w1 $ lam (). runWriter @#w2 m
> (((), 3.0), 2.0)


foom :: () -> {#s :: State (3=>Int)} ()
foom () =
  _ = indexState @#s (0@3) $ lam (). put @#s 1
  _ = indexState @#s (2@3) $ lam (). put @#s 2
  ()

:p runState @#s [0,0,0] foom
> ((), [1, 0, 2])
