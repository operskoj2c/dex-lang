
:p
   m : s:(Ref Int) -> {State s} Int
   m s = get s
   runState 2 m
> (2, 2)

:p
   m : s:(Ref Int) -> {State s} ()
   m s = s := 3
   runState 0 m
> ((), 3)

:p
   m : r:(Ref Int) -> {Reader r} Int
   m r = ask r
   runReader 5 m
> 5

:p
  stateAction : s:(Ref Real) -> {State s} ()
  stateAction s =
     x = get s
     s := (x + 2.0)
     z = get s
     s := (z * 3.0)
  --
  runState 1.0 stateAction
> ((), 9.0)

:p
  rwsAction : r:(Ref Int) -> w:(Ref Real) -> s:(Ref Bool) -> {Reader r, Writer w, State s} Int
  rwsAction r w s =
    x = get  s
    w += 2.0
    s := not x
    r = ask  r
    w += 4.0
    (r `iadd` 2)
  --
  runReader 2 \r.
    runState True \s.
      runWriter \w.
        rwsAction r w s
> ((4, 6.0), False)

:p
   m : s:(Ref (3=>Int)) -> {State s} ()
   m s =
     indexState s 0@3 \s'. s' := 10
     indexState s 2@3 \s'. s' := 20
     x = indexState s 0@3 \s'. get s'
     indexState     s 1@3 \s'. s' := x
   runState [0,0,0] m
> ((), [10, 10, 20])

:p runState [0,0,0] \s.
     putAt s 0@3 10
     putAt s 2@3 20
     x = getAt s 0@3
     putAt s 1@3 x
> ((), [10, 10, 20])

:p runReader [1,2,3] \r .
     indexReader r (1@3) \r'. ask r'
> 2

:p
  m : w:(Ref Real) -> s:(Ref Real) -> {Writer w, State s} ()
  m w s =
    x = get s
    w += x
  runState 1.0 \s. runWriter \w . m w s
> (((), 1.0), 1.0)

myAction: w:(Ref Real) -> r:(Ref Real) -> {Reader r, Writer w} ()
myAction w r =
  x = ask r
  w += x
  w += 2.0

:p runReader 1.5 \r. runWriter \w. myAction w r
> ((), 3.5)

:p
  m : w1:(Ref Real) -> w2:(Ref Real) -> {Writer w1, Writer w2} ()
  m w1 w2 =
    w1 += 1.0
    w2 += 3.0
    w1 += 1.0
  runWriter \w1. runWriter \w2. m w1 w2
> (((), 3.0), 2.0)

foom : s:(Ref (3=>Int)) -> {State s} ()
foom s =
  indexState s (0@3) $ \s'. s' := 1
  indexState s (2@3) $ \s'. s' := 2

:p runState [0,0,0] foom
> ((), [1, 0, 2])

:p
  foo : Real -> Real
  foo x =
     f = runReader x \r.
           y = ask r
           \z. 100.0 * x + 10.0 * y + z
     f 1.0

  foo 3.0
> 331.0

:p
  foo : Real -> (Real, Real)
  foo x =
     (f, ans) = runState x \s.
         y = get s
         \z. 100.0 * x + 10.0 * y + z
     (f 1.0, ans)

  foo 3.0
> (331.0, 3.0)

:p
  foo : Real -> (Real, Real)
  foo x =
     (f, ans) = runWriter \s.
        s += x
        \y. 10.0 * x + y
     (f 1.0, ans)

  foo 3.0
> (31.0, 3.0)

:p
  runReader 2.0 \r:(Ref Real).
    runWriter \w:(Ref Real).
      runWriter \w':(Ref Real).
        runState 3 \s.
          x = ask r
          y = get s
          w += x
          w' += x + x
          s := 4
          (x, y)
> ((((2.0, 3), 4), 4.0), 2.0)

-- TODO: this should be a type error!
:p
   m : r:(Ref (3=>Int)) -> {Reader r} (3=>Int)
   m r = indexReader r (1@3) \r'. ask r
   runReader [1,2,3] m
> [1, 2, 3]

symmetrizeInPlace : n=>n=>Real -> n=>n=>Real
symmetrizeInPlace mat =
  snd $ runState mat \ref.
    for i j.
       x = getAt2 ref i j
       y = getAt2 ref j i
       avg = (x + y) / 2.0
       putAt2 ref i j avg
       putAt2 ref j i avg

symmetrizeInPlace [[1.,2.],[3.,4.]]
> [[1.0, 2.5], [2.5, 4.0]]

:p runReader 5 \r. ()
> ()

:p  %runReader(5, \r. ())
> ()

:p snd $ runWriter \w.
  for i:2.
    w += 1.0
    w += 1.0
> 4.0

:p snd $ runWriter \w.
  for i:2.
    w += 1.0
  w += 1.0
> 3.0

:p snd $ runWriter \ref.
     ref += [1.,2.,3.]
     ref += [2.,4.,5.]
> [3.0, 6.0, 8.0]
