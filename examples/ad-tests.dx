:p f :: Real -> Real
   f x = x
   jvp f 3.0 2.0
> 2.0

:p f x = x * x
   jvp f 3.0 1.5
> 9.0

:p f x = x + x
   jvp f 3.0 2.0
> 4.0

:p f x = x * x * x
   jvp f 2.0 1.5
> 18.0

:p f x = x * x * x
   jvp (lam x. jvp f x 1.0) 2.0 1.0
> 12.0

:p f x = 4.0 * x * x * x
   deriv (deriv (deriv f)) 1.234
> 24.0

:p f :: Real --o Real
   f x = x
   transposeLinear f 2.0
> 2.0

:p f :: Real --o Real
   f x = x + x
   transposeLinear f 1.0
> 2.0

:p f :: Real --o Real
   f x = x + (x + x) * 2.0
   transposeLinear f 1.0
> 5.0

:p f :: Real --o Real
   f x = x * 2.0
   transposeLinear f 1.0
> 2.0

:p f :: Real --o Real
   f x = 2.0 * x
   transposeLinear f 1.0
> 2.0

:p f :: Real --o (Real, Real)
   f x = (x, 2.0 * x)
   transposeLinear f (1.0, 3.0)
> 7.0

:p f :: (Real, Real) --o Real
   f (x,y) = x + 2.0 * y
   transposeLinear f 1.0
> (1.0, 2.0)

:p grad (lam x. x * x) 1.0
> 2.0

:p deriv cos 0.0
> 0.0

:p deriv sin 0.0
> 1.0

:p (sin 1.0, deriv (deriv sin) 1.0)
> (0.84147096, -0.84147096)

:p (cos 1.0, deriv (deriv (deriv sin)) 1.0)
> (0.5403023, -0.5403023)

:p checkDeriv sin 1.0
> True

:p checkDeriv cos 1.0
> True

:p checkDeriv exp 2.0
> True

:p checkDeriv log 2.0
> True

:p checkDeriv sqrt 2.0
> True

:p checkDeriv (lam x. cos (sin (exp x))) 2.0
> True

:p checkDeriv (deriv sin) 1.0
> True

:p checkDeriv (deriv cos) 1.0
> True

:p deriv (fdiv 3.0) 2.0
> -0.75

:p deriv (lam x. x / 2.0) 3.0
> 0.5

@primitive
badDerivFun :: Real -> Real
badDerivFun x = x

badDerivFun#lin :: Real -> (Real, Real --o Real)
badDerivFun#lin x = (x, llam t. 2. * t)

:p checkDeriv badDerivFun 1.0
> False

-- Perturbation confusion test suggested by Barak Pearlmutter
-- https://github.com/HIPS/autograd/issues/4
:p deriv (lam x. x * deriv (lam y. x * y) 2.0) 1.0
> 2.0

sinn#lin :: Real -> Real
sinn#lin x = x
> Error: variable not in scope: sinn

@primitive
newprim :: Real -> Real
newprim x = x

newprim#lin :: Real -> Real
newprim#lin x = x
> Type error:Annotation should have type: (Real -> (Real, (Real --o Real)))

deriv newprim 1.0
> Not implemented: linearization for newprim

:p f :: 3=>Real -> 3=>Real
   f x = for i. sq x.i
   jvp f [1.0, 2.0, 3.0] [1.0, 10.0, 100.0]
> [2.0, 40.0, 600.0]

:p jvp sum [1.0, 2.0, 3.0] [1.0, 2.0, 3.0]
> 6.0

:p f :: (Real, 3=>Real) -> (Real, 3=>Real)
   f (x0, xs) = scan x0 for i. lam c. (c * 2.0, c * xs.i)
   jvp f (10.0, [1., 2., 3.]) (10.0, [1., 2., 3.])
> (80.0, [20.0, 80.0, 240.0])
