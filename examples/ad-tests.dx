
-- TODO: use prelude sum instead once we can differentiate state effect
def sum'  (xs:n=>Real) : Real = snd $ withAccum \ref. for i. ref += xs.i

:p
   f : Real -> Real = \x. x
   jvp f 3.0 2.0
> 2.0

:p
   f = \x. x * x
   jvp f 3.0 1.5
> 9.0

:p
   f = \x. x + x
   jvp f 3.0 2.0
> 4.0

:p
   f = \x. x * x * x
   jvp f 2.0 1.5
> 18.0

:p
   f : Real --o Real = \x. x
   transposeLinear f 2.0
> 2.0

:p
   f : Real --o Real = \x. x + x
   transposeLinear f 1.0
> 2.0

:p
   f : Real --o Real = \x. x + (x + x) * 2.0
   transposeLinear f 1.0
> 5.0

:p
   f : Real --o Real = \x. x * 2.0
   transposeLinear f 1.0
> 2.0

:p
   f : Real --o Real = \x. 2.0 * x
   transposeLinear f 1.0
> 2.0

:p grad (\x. x * x) 1.0
> 2.0

:p deriv (\x. 3.0 / x) 2.0
> -0.75

:p deriv (\x. x / 2.0) 3.0
> 0.5

:p
  f : n:Type ?-> n=>Real -> n=>Real =
   \xs. for i. xs.i * xs.i

  jvp f [1.,2.] [3.,4.]
> [6.0, 16.0]

:p jvp transpose [[1.,2.], [3.,4.]] [[10.,20.], [30.,40.]]
> [[10.0, 30.0], [20.0, 40.0]]

:p jvp sum' [1., 2.] [10.0, 20.0]
> 30.0

f : Real -> Real = \x. snd $ withAccum \ref. ref += x
:p jvp f 1.0 1.0
> 1.0

:p
   f = \x. x * x * x
   jvp (\x. jvp f x 1.0) 2.0 1.0
> 12.0

:p
   f = \x. 4.0 * x * x * x
   deriv (deriv (deriv f)) 1.234
> 24.0

-- TODO: handle pairs and re-enable
:p
   f : Real --o (Real & Real) = \x. (x, 2.0 * x)
   transposeLinear f (1.0, 3.0)
> 7.0

-- TODO: handle pairs and re-enable
:p
   f : (Real & Real) --o Real = \(x,y). x + 2.0 * y
   transposeLinear f 1.0
> (1.0, 2.0)

-- TODO: handle user-defined linearity rules an re-enable

-- :p deriv cos 0.0
-- > 0.0

-- :p deriv sin 0.0
-- > 1.0

-- :p (sin 1.0, deriv (deriv sin) 1.0)
-- > (0.84147096, -0.84147096)

-- :p (cos 1.0, deriv (deriv (deriv sin)) 1.0)
-- > (0.5403023, -0.5403023)

-- :p checkDeriv sin 1.0
-- > True

-- :p checkDeriv cos 1.0
-- > True

-- :p checkDeriv exp 2.0
-- > True

-- :p checkDeriv log 2.0
-- > True

-- :p checkDeriv sqrt 2.0
-- > True

-- :p checkDeriv (\x. cos (sin (exp x))) 2.0
-- > True

-- :p checkDeriv (deriv sin) 1.0
-- > True

-- :p checkDeriv (deriv cos) 1.0
-- > True

-- badDerivFun : Real -> Real
-- badDerivFun x = x

-- badDerivFun#lin : Real -> (Real, Real --o Real)
-- badDerivFun#lin x = (x, llam t. 2. * t)

-- :p checkDeriv badDerivFun 1.0
-- > False

-- Perturbation confusion test suggested by Barak Pearlmutter
-- https://github.com/HIPS/autograd/issues/4
:p deriv (\x. x * deriv (\y. x * y) 2.0) 1.0
> 2.0

-- sinn#lin : Real -> Real
-- sinn#lin x = x
-- > Error: variable not in scope: sinn

tripleit : Real --o Real = \x. x + x + x

:p tripleit 1.0
> 3.0

:p transposeLinear tripleit 1.0
> 3.0

:p transposeLinear (transposeLinear tripleit) 1.0
> 3.0

:p
  f : n:Type ?->  Real --o n=>Real = \x. for i. x

  transposeLinear f [1.0, 2.0]
> 3.0

:p
  f : n:Type ?-> n=>Real --o n=>Real = \x. for i. x.i * 2.0

  transposeLinear f [1.0, 2.0]
> [2.0, 4.0]

myOtherSquare : Real -> Real =
  \x. snd $ withAccum \w. w += x * x

:p myOtherSquare 3.0
> 9.0

:p jvp myOtherSquare 3.0 1.0
> 6.0

:p transposeLinear (jvp myOtherSquare 3.0) 1.0
> 6.0

:p
  f : Real -> Real =
    \x. fst (x * x, 2 + 1)

  jvp f 1.0 3.0
> 6.0

:p
  f : Real -> Real = \x.
    x * i2r (1 + 1)

  jvp f 1.0 2.0
> 4.0

:p
  f : (Fin 2)=>Real -> Real =
    \xs. xs.(0 @ Fin 2) * xs.(1 @ Fin 2)

  jvp f [1., 2.] [3.0, 4.0]
> 10.0

:p
  f : (Real & Real) -> Real =
    \(x,y). x * y

  jvp f (1., 2.) (3.0, 4.0)
> 10.0

:p
  f : n:Type ?-> n=>Real -> n=>Real =
    \xs. for i. xs.i * xs.i

  jvp f [1.,2.] [3.,4.]
> [6.0, 16.0]

:p jvp sum' [1., 2.] [3.0, 4.0]
> 7.0

:p grad sum' [1.,2.]
> [1.0, 1.0]


vec = [1.]

:p jvp (\x. vec) [1.] [1.]
> [0.0]

:p grad (\(x, y). vdot x y) ([1.,2.], [3.,4.])
> ([3.0, 4.0], [1.0, 2.0])

:p
  f : Real -> Real = \x.
    y = x * 2.0
    snd $ withAccum \a.
      a += x * 2.0
      a += y
  grad f 1.0
> 4.0
