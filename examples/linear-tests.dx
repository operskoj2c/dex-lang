:p
   f : Real --o Real
   f = llam x. x
   f 1.0
> 1.0

:t llam x:Real. x * x
> Linearity error: pattern spent twice: [x]
>
> :t llam x:Real. x * x
>                   ^^

:t llam x:Real. x * 2.0
> (Real --o Real)

:t llam x:Real. 2.0 * x
> (Real --o Real)

:t llam x:Real. llam y:Real. x * y
> (Real --o (Real --o Real))

:t llam x:Real. (llam y. y) x
> (Real --o Real)

:t llam x:Real. (\y. y) x
> Linearity error: nonlinear function consumed linear data: [x]
>
> :t llam x:Real. (\y. y) x
>    ^^^^^^^^^^^^^^^^^^^^^^

:t llam x:Real. (1.0, x)
> (Real --o (Real, Real))

:t llam x:Real. (x, 1.0)
> (Real --o (Real, Real))

:t llam x:Real. (x, x)
> (Real --o (Real, Real))

:t llam x:Real. 1.0 + x
> (Real --o Real)

:t llam x:Real. x + 1.0
> (Real --o Real)

:t llam x:Real. x + x
> (Real --o Real)

:t llam x:Real. 1.0 * x
> (Real --o Real)

:t llam x:Real. x * 1.0
> (Real --o Real)

:t llam x:Real. x * x
> Linearity error: pattern spent twice: [x]
>
> :t llam x:Real. x * x
>                   ^^

:t llam x:Real.
     y = x
     x + y
> (Real --o Real)

:t llam x:Real.
     y = x; y * x
> Linearity error: pattern spent twice: [x]
>
>      y = x; y * x
>               ^^

:t llam (x, y). x + y
> ((Real, Real) --o Real)

:t llam (x, y). x * y
> Linearity error: pattern spent twice: [x]
>
> :t llam (x, y). x * y
>                   ^^

:p (llam x. x + x) 1.0
> 2.0

:p (llam x. x * 3.0) 1.0
> 3.0

:t llam x. x * 0.0
> (Real --o Real)

:t llam x. 0.0 * x
> (Real --o Real)

:t llam x:Real. 0.0 * 0.0
> (Real --o Real)

:t llam x. x + 0.0
> (Real --o Real)

:t llam x. 0.0 + x
> (Real --o Real)

:t llam x:Real. 0.0 + 0.0
> (Real --o Real)

:t llam x. (0.0 + x) + 0.0
> (Real --o Real)

:t llam x. (0.0 + x) + 1.0
> (Real --o Real)

:t llam x. 0.0 + (x + 1.0)
> (Real --o Real)

:t llam y. llam x. (x + 0.0) + (y + 0.0)
> (Real --o (Real --o Real))

:t llam y. llam x. (x * 0.0) + y
> (Real --o (Real --o Real))

:t llam x:Real. ()
> (Real --o ())

nonLinFun : Real -> Real
nonLinFun x = x

linFun : Real --o Real
linFun x = x

eatsLin : (Real --o Real) -> Bool
eatsLin f = True

eatsNonLin : (Real -> Real) -> Bool
eatsNonLin f = True

:t eatsLin linFun
> Bool

:t eatsLin nonLinFun
> Type error:
> Expected: (Real --o Real)
>   Actual: (Real -> Real)
> In: nonLinFun
>
> :t eatsLin nonLinFun
>            ^^^^^^^^^

:t eatsNonLin linFun
> Type error:
> Expected: (Real -> Real)
>   Actual: (Real --o Real)
> In: linFun
>
> :t eatsNonLin linFun
>               ^^^^^^

:t eatsNonLin nonLinFun
> Bool

:t eatsLin (\x. linFun x)
> Bool

:t eatsLin (\x. nonLinFun x)
> Linearity error: nonlinear function consumed linear data: [x]
>
> :t eatsLin (\x. nonLinFun x)
>             ^^^^^^^^^^^^^^^

:t eatsNonLin (\x. linFun x)
> Bool

:t eatsNonLin (\x. nonLinFun x)
> Bool

:t \f. (eatsLin f, eatsNonLin f)
> Type error:
> Expected: (Real -> Real)
>   Actual: (Real --o Real)
> In: f
>
> :t \f. (eatsLin f, eatsNonLin f)
>                               ^

linFstArg : Real --o Real -> Real
linFstArg x y = x / y

linUnary : Real --o Real
linUnary x = linFstArg x 1.0

-- Nonlinear because of defaulting rules
:t
   f x = x + x
   f
> (Real -> Real)

f1 : Real --o Real
f1 x = %runReader(x, \r.
   y = %ask(r)
   z = %ask(r)
   y + z)

f2 : Real --o Real
f2 x = %runReader(x, \r.
   y = %ask(r)
   z = %ask(r)
   y * z)
> Linearity error: pattern spent twice: [x]
>
>    y * z)
>      ^^

f3 : Real --o Real
f3 x =
  y = snd $ %runWriter(\w.
        _ = %tell(w, x)
        _ = %tell(w, x)
        ())
  y + x

f2 : Real --o Real
f2 x =
  y = snd $ %runWriter(\w.
        _ = %tell(w, x)
        _ = %tell(w, x)
        ())
  y * x
> Linearity error: pattern spent twice: [x]
>
>   y * x
>     ^^
