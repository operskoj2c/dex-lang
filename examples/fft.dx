'# Fast Fourier Transform
A basic implementation, which uses a radix-2 algorithm for FFT of arrays whose sizes are
powers of two.
For non-power-of-2 sized arrays, it uses
[Bluestein's Algorithm](https://en.wikipedia.org/wiki/Chirp_Z-transform),
which calls the power-of-2 FFT as a subroutine.


'## General helper functions


def isPowerOf2 (x:Int) : Bool =
  -- A fast trick based on bitwise AND.
  if x == 0
    then False
    else 0 == %and x (x - 1)  -- Make (.&.) polymorphic?

def intpow [Mul a] (base:a) (power:Int) : a =
  -- Todo: Use Knuth's power trick inside of commutative reduce.
  reduce one (*) (for a:(Fin power). base)

def intlog2 (x:Int) : Int =
  yieldState (-1) \ansRef.
    runState 1 \cmpRef.
      while do
        if x >= (get cmpRef)
          then 
            ansRef := (get ansRef) + 1
            cmpRef := %shl (get cmpRef) 1
            True
          else
            False

def intpow2 (power:Int) : Int = %shl 1 power

def nextpow2 (x:Int) : Int = case isPowerOf2 x of
  True -> x
  False -> intpow2 (1 + intlog2 x)


'## Inner FFT functions

data FTDirection =
  ForwardFT
  InverseFT

-- Todo: Replace with reshaping.
def butterfly_ixs (j:Int) (pow2:Int) : (n & n) =
  k = ((idiv j pow2) * pow2 * 2) + mod j pow2
  (k@n, (k + pow2)@n)

def power_of_2_fft (direction: FTDirection) (x: n=>Complex) : n=>Complex =
  -- Input size must be a power of 2.
  -- Could enforce this with tables-as-index-sets like:
  -- (x: (log2n=>(Fin 2))=>Complex)).
  dir_const = case direction of
    ForwardFT -> -pi
    InverseFT -> pi

  log2n = intlog2 (size n)
  halfn = idiv (size n) 2
  
  ans = yieldState x \refOuter.
    for i:(Fin log2n).
      pow2 = intpow 2 (ordinal i)
      copy = get refOuter
      refOuter := yieldAccum (AddMonoid Complex) \ref.
        for j:(Fin halfn).  -- Executes in parallel.
          j' = ordinal j

          angle = dir_const * (IToF $ mod j' pow2) / IToF pow2
          h = (j' + halfn)@n
          v = copy.h * (MkComplex (cos angle) (sin angle))
          (a, b) = butterfly_ixs j' pow2

          ref!a += copy.(j'@n) + v
          ref!b += copy.(j'@n) - v

  case direction of
    ForwardFT -> ans
    InverseFT -> ans / (IToF (size n))

def convolve_complex (u:n=>Complex) (v:m=>Complex) : ({ovals:n | padding:m }=>Complex) =
  -- Convolve by pointwise multiplication in the Fourier domain.
  convolved_size = (size n) + (size m) - 1
  working_size = nextpow2 convolved_size
  u_padded = padTo (Fin working_size) zero u
  v_padded = padTo (Fin working_size) zero v
  spectral_u = power_of_2_fft ForwardFT u_padded
  spectral_v = power_of_2_fft ForwardFT v_padded
  spectral_conv = for i. spectral_u.i * spectral_v.i
  padded_conv = power_of_2_fft InverseFT spectral_conv
  slice padded_conv 0 {ovals:n | padding:m }

def convolve (u:n=>Float) (v:m=>Float) : ({ovals:n | padding:m }=>Float) =
  u' = for i. MkComplex u.i 0.0
  v' = for i. MkComplex v.i 0.0
  ans = convolve_complex u' v'
  for i.
    (MkComplex real imag) = ans.i
    real


'## FFT Interface

def reflect (i:n) : n =
  s = size n
  (s - 1 - ordinal i)@n

def backwards_and_forwards (mid:a) (seq:n=>a) : ({back:n | mid:Unit | zforward:n}=>a) =
  -- Turns sequence 12345 into 543212345.
  for i.
    case i of
      {|back=i|} -> seq.(reflect i)
      {|mid=i|} -> mid
      {|zforward=i|} -> seq.i

def listToTable ((AsList n xs): List a) : (Fin n)=>a = xs

def fft (x: n=>Complex): n=>Complex =
  if isPowerOf2 (size n)
    then power_of_2_fft ForwardFT x
    else
      -- Bluestein's algorithm for FFT on any size of array.
      im = MkComplex 0.0 1.0
      wks = for i.
        i_squared = IToF $ sq $ ordinal i
        exp $ (-im) * (MkComplex (pi * i_squared / (IToF (size n))) 0.0)

      tailList = tail wks 1
      baf = backwards_and_forwards (head wks) (listToTable tailList)
      xq = for i. x.i * wks.i
      baf_conj = for i. complex_conj baf.i
      conved = convolve_complex xq baf_conj
      convslice = slice conved (size n - 1) n
      for i. wks.i * convslice.i

def ifft (xs: n=>Complex): n=>Complex =
  if isPowerOf2 (size n)
    then power_of_2_fft InverseFT xs
    else
      fo = fft (for i. complex_conj xs.i)
      for i. (complex_conj fo.i) / (IToF (size n))

def  fft_real (x: n=>Float): n=>Complex =  fft for i. MkComplex x.i 0.0
def ifft_real (x: n=>Float): n=>Complex = ifft for i. MkComplex x.i 0.0

def fft2 (x: n=>m=>Complex): n=>m=>Complex =
  x'      = for i. fft x.i
  transpose for i. fft (transpose x').i

def ifft2 (x: n=>m=>Complex): n=>m=>Complex =
  x'      = for i. ifft x.i
  transpose for i. ifft (transpose x').i

def  fft2_real (x: n=>m=>Float): n=>m=>Complex =  fft2 for i j. MkComplex x.i.j 0.0
def ifft2_real (x: n=>m=>Float): n=>m=>Complex = ifft2 for i j. MkComplex x.i.j 0.0

-------- Tests --------

a = for i. MkComplex [10.1, -2.2, 8.3, 4.5, 9.3].i 0.0
b = for i:(Fin 3) j:(Fin 7).
  MkComplex (randn $ ixkey2 (newKey 0) i j) 0.0

:p a ~~ (ifft $ fft a)
> True
:p a ~~ (fft $ ifft a)
> True
:p b ~~ (ifft2 $ fft2 b)
> True
:p b ~~ (fft2 $ ifft2 b)
> True
