' Cholesky Factorization
https://en.wikipedia.org/wiki/Cholesky_decomposition

chol :: (n=>n=>Real) -> (n=>n=>Real)
chol x = ..
  inUpper:: A m::Ix. m -> m -> Bool
  inUpper i j = (asint i) < (asint j)
  inLower:: A m::Ix. m -> m -> Bool
  inLower i j = (asint i) > (asint j)
  ..
  diagOp r i = sqrt (x.i.i - sum for k::n. select ( inLower k i) (sq r.i.k) 0.0)
  lowerOp r i j = 
    innersum = sum for k. ..
      select (inLower j k) (r.i.k * r.j.k) 0.0
    (x.i.j - innersum) / r.j.j
  ..
  fs = ..
  for outerrow::n. ..
    lam r.
    for i::n. ..
      select (inUpper i outerrow) ..
        (for j::n. r.i.j) .. -- copy 
        for j::n. ..
          select (inUpper i j) ..
            0.0 ..
            (select (inLower i j) ..
              (lowerOp r i j) ..
              (diagOp r j))
  ..
  init = for i::n. for j::n. 0.0
  fold init fs


' Helpers

ixkey2:: A n::Ix m::Ix. Key -> n -> m -> Key
ixkey2 x i = ixkey $ ixkey x i

' ## Matrix Math

' Vector-Vector dot product

vdot :: n=>Real -> n=>Real -> Real
vdot x y = sum for i. x.i * y.i

' Matrix Matrix Product

mmp :: l=>m=>Real -> m=>n=>Real -> l=>n=>Real
mmp m1 m2 = for i k. sum for j. m1.i.j * m2.j.k


eyeLike:: n=>n=>Real -> n=>n=>Real
eyeLike x = for i. for j.
  select ((asint i) == (asint j)) 1.0 0.0

transpose::n=>m=>Real->m=>n=>Real
transpose x = for i. for j. x.j.i

mmadd:: (n=>m=>Real)->(n=>m=>Real)->(n=>m=>Real)
mmadd x y = for i. for j. x.i.j + y.i.j

' Test

a = for x::6. for y::6. (randn $ ixkey2 (newKey 1) x y)

psd = ..
    x = mmp a (transpose a)
    mmadd x $ eyeLike x

:p psd
> [ [5.087431, -0.20368764, 1.0131348, 5.8492858e-2, -0.6204645, -0.9139846]
> , [-0.20368764, 5.6285644, 0.33034402, -2.1077604, -3.0768077, 4.107667]
> , [1.0131348, 0.33034402, 5.681422, -0.70768964, 3.3552094, -0.8313915]
> , [5.8492858e-2, -2.1077604, -0.70768964, 7.4609294, -1.3878865, 7.465179e-2]
> , [-0.6204645, -3.0768077, 3.3552094, -1.3878865, 7.579234, -4.5208483]
> , [-0.9139846, 4.107667, -0.8313915, 7.465179e-2, -4.5208483, 7.5227675] ]

l = chol psd

:p l
> [ [2.2555335, 0.0, 0.0, 0.0, 0.0, 0.0]
> , [-9.030575e-2, 2.3724597, 0.0, 0.0, 0.0, 0.0]
> , [0.44917747, 0.15633874, 2.3835733, 0.0, 0.0, 0.0]
> , [2.593305e-2, -0.88744134, -0.24358249, 2.73147, 0.0, 0.0]
> , [-0.27508548, -1.3073561, 1.545227, -0.79245394, 2.7530408, 0.0]
> , [-0.40521884, 1.7159717, -0.38498884, 0.5543564, -0.49208668, 2.7427664] ]

reconst = for i. for j. psd.i.j - (mmp l (transpose l)).i.j

:p reconst
> [ [0.0, 0.0, 0.0, 0.0, -1.110223e-16, 1.110223e-16]
> , [0.0, -8.155129e-3, 0.0, 0.0, 0.0, 0.0]
> , [0.0, 0.0, -0.22620222, 0.0, 0.0, -1.110223e-16]
> , [0.0, 0.0, 0.0, -0.847557, 0.0, -3.330669e-16]
> , [-1.110223e-16, 0.0, 0.0, 0.0, -4.800562, 0.0]
> , [1.110223e-16, 0.0, -1.110223e-16, -3.330669e-16, 0.0, -3.8064377] ]
