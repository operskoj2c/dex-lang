' # Cholesky Factorization
https://en.wikipedia.org/wiki/Cholesky_decomposition

' ### Matrix Math

eye : n=>n=>Real
eye = for i j. select (i == j) 1.0 0.0

mmadd: (n=>m=>Real)->(n=>m=>Real)->(n=>m=>Real)
mmadd x y = for i j. x.i.j + y.i.j

' ## Cholesky Algorithm

chol : (n=>n=>Real) -> (n=>n=>Real)
chol x = snd $ runState (for _ _. 0.0) \buf.
  for i.
    for j':(...i).
      j = %inject(j')
      row  = for k:(..<j). getAt2 buf i %inject(k)
      row' = for k:(..<j). getAt2 buf j %inject(k)
      a = x.i.j - vdot row row'
      b = getAt2 buf j j
      putAt2 buf i j $ select (i==j) (sqrt a) (a / b)
    ()

' ## PSD solver based on Cholesky decomposition

trisolveL : n=>n=>Real -> n=>Real -> n=>Real
trisolveL mat b = execState (for _. 0.0) \buf.
  for i.
    row   = for j:(..<i). mat.i.%inject(j)
    xPrev = for j:(..<i). getAt buf %inject(j)
    putAt buf i $ (b.i - vdot row xPrev) / mat.i.i

trisolveU : n=>n=>Real -> n=>Real -> n=>Real
trisolveU mat b = execState (for _. 0.0) \buf.
  rof i.
    row   = for j:(i...). mat.i.%inject(j)
    xPrev = for j:(i...). getAt buf %inject(j)
    putAt buf i $ (b.i - vdot row xPrev) / mat.i.i

psdsolve : n=>n=>Real -> n=>Real -> n=>Real
psdsolve mat b =
  l = chol mat
  trisolveU (transpose l) $  trisolveL l b

' Test

type N = 4
(k1, k2) = splitKey $ newKey 0

psd : N=>N=>Real
psd =
  a = for i:N j:N. randn $ ixkey2 k1 i j
  x = mmp a (transpose a)
  mmadd x eye

l : N=>N=>Real
l = chol psd

:p l
> [ [2.021765, 0.0, 0.0, 0.0]
> , [-1.7950183, 1.9901744, 0.0, 0.0]
> , [-0.89788574, 0.18675673, 1.9802661, 0.0]
> , [1.4457518, -0.29644823, 0.72458607, 2.2308075] ]

psdReconstructed = l `mmp` transpose l

:p sum for (i, j). sq (psd.i.j - psdReconstructed.i.j)
> 2.4651903e-32

vec : N=>Real
vec = for i. randn $ ixkey k2 i

:p (vec, mvp psd (psdsolve psd vec))
> ( [1.2112769, 0.23284969, -0.74191034, 0.8833507]
> , [1.2112769, 0.23284969, -0.74191034, 0.8833507] )
