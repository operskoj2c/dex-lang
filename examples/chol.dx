' Cholesky Factorization
https://en.wikipedia.org/wiki/Cholesky_decomposition

chol :: (n=>n=>Real) -> (n=>n=>Real)
chol x = ..
  inUpper:: A m::Ix. m -> m -> Bool
  inUpper i j = (asint i) < (asint j)
  inLower:: A m::Ix. m -> m -> Bool
  inLower i j = (asint i) > (asint j)
  ..
  diagOp r i = sqrt (x.i.i - sum for k::n. select ( inLower k i) (sq r.i.k) 0.0)
  lowerOp r i j = 
    innersum = sum for k. ..
      select (inLower j k) (r.i.k * r.j.k) 0.0
    (x.i.j - innersum) / r.j.j
  ..
  fs = ..
  for outerrow::n. ..
    lam r.
    for i::n. ..
      select (inUpper i outerrow) ..
        (for j::n. r.i.j) .. -- copy 
        for j::n. ..
          select (inUpper i j) ..
            0.0 ..
            (select (inLower i j) ..
              (lowerOp r i j) ..
              (diagOp r j))
  ..
  init = for i::n. for j::n. 0.0
  fold init fs


' test

ixkey2:: A n::Ix m::Ix. Key -> n -> m -> Key
ixkey2 x i = ixkey $ ixkey x i

' ## Matrix Math

' Vector-Vector dot product

vdot :: n=>Real -> n=>Real -> Real
vdot x y = sum for i. x.i * y.i

' Matrix Matrix Product

mmp :: l=>m=>Real -> m=>n=>Real -> l=>n=>Real
mmp m1 m2 = for i k. sum for j. m1.i.j * m2.j.k

a = for x::6. for y::6. (randn $ ixkey2 (newKey 1) x y)

eyeLike:: n=>n=>Real -> n=>n=>Real
eyeLike x = for i. for j.
  select ((asint i) == (asint j)) 1.0 0.0

transpose::n=>m=>Real->m=>n=>Real
transpose x = for i. for j. x.j.i
psd = ..
    x = mmp a (transpose a)
    for i. for j. x.i.j + (eyeLike x).i.j

:p psd

l = chol psd

:p l

reconst = for i. for j. psd.i.j - (mmp l (transpose l)).i.j

:p reconst
