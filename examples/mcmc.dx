'# Markov Chain Monte Carlo

'## General MCMC utilities

include "plot.dx"

LogProb : Type = Float

def runChain
      (initialize: Key -> a)
      (step: Key -> a -> a)
      (numSamples: Int)
      (k:Key)
      : Fin numSamples => a =
  [k1, k2] = splitKey k
  fst $ withState (initialize k1) \s.
    for i:(Fin numSamples).
      x = step (ixkey k2 i) (get s)
      s := x
      x

def propose
      (logDensity : a -> LogProb)
      (cur      : a)
      (proposal : a)
      (k : Key)
      : a =
  accept = logDensity proposal > (logDensity cur + log (rand k))
  select accept proposal cur

def meanAndCovariance (n:Type) ?-> (d:Type) ?->
      (xs:n=>d=>Float) : (d=>Float & d=>d=>Float) =
   xsMean :    d=>Float = (for i. sum for j. xs.j.i) / IToF (size n)
   xsCov  : d=>d=>Float = (for i i'. sum for j.
                           (xs.j.i' - xsMean.i') *
                           (xs.j.i  - xsMean.i )   ) / IToF (size n - 1)
   (xsMean, xsCov)

'## Metropolis-Hastings implementation

MHParams : Type = Float  -- step size

def mhStep
      (stepSize: MHParams)
      (logProb: (d=>Float) -> LogProb)
      (k:Key)
      (x:d=>Float)
      : d=>Float =
  [k1, k2] = splitKey k
  proposal = x + stepSize .* randnVec k1
  propose logProb x proposal k2

'## HMC implementation

HMCParams : Type = (Int & Float)  -- leapfrog steps, step size

def leapfrogIntegrate
      (_:VSpace a) ?=>
      ((nsteps, dt): HMCParams)
      (logProb: a -> LogProb)
      ((x, p): (a & a))
      : (a & a) =
  x = x + (0.5 * dt) .* p
  (x, p) = applyN nsteps (x, p) \(xOld, pOld).
    pNew = pOld + dt .* grad logProb xOld
    xNew = xOld + dt .* pNew
    (xNew, pNew)
  p = p + (0.5 * dt) .* grad logProb x
  (x, p)

def hmcStep
      (params: HMCParams)
      (logProb: (d=>Float) -> LogProb)
      (k:Key)
      (x:d=>Float)
      : d=>Float =
  hamiltonian = \(x, p). logProb x - 0.5 * vdot p p
  [k1, k2] = splitKey k
  p = randnVec k1
  proposal = leapfrogIntegrate params logProb (x, p)
  fst $ propose hamiltonian (x, p) proposal k2

'## Test it out

'Generate samples from a multivariate normal distribution N([1.5, 2.5], [[1., 0.], [0., 0.05]]).

def myLogProb (x:(Fin 2)=>Float) : LogProb =
  x' = x - [1.5, 2.5]
  neg $ 0.5 * inner x' [[1.,0.],[0.,20.]] x'

numSamples = 10000
k0 = newKey 1

mhParams = 0.1
mhSamples  = runChain randnVec (mhStep  mhParams  myLogProb) numSamples k0

:p meanAndCovariance mhSamples
> ([1.5165595, 2.493105], [[1.0373966, 1.1821209e-2], [1.1821209e-2, 5.3775612e-2]])

:html showPlot $ yPlot (for i.  mhSamples.i.(0@_))
> <html output>

hmcParams = (10, 0.1)
hmcSamples = runChain randnVec (hmcStep hmcParams myLogProb) numSamples k0

:p meanAndCovariance hmcSamples
> ([1.50457, 2.5000212], [[0.9738671, 3.4229287e-3], [3.4229287e-3, 5.0585825e-2]])

:html showPlot $ yPlot (for i.  hmcSamples.i.(0@_))
> <html output>
