:t let g :: a -> a
       g x = x
    in g
> A a. (a -> a)


:t let f x::Int = x in f 1
> Int


:t let f x::Real = x in f 1
> Type error:
> Expected: Real
>   Actual: Int
> In: 1
>
> :t let f x::Real = x in f 1
>                           ^

:t let g :: (a -> Int) -> (a -> Int)
       g x = x
    in g
> A a. ((a -> Int) -> (a -> Int))


:t let g :: a -> a
       g x = iadd x x
    in g
> Type error:
> Expected: Int
>   Actual: a
> In: x
>
>        g x = iadd x x
>                   ^^

h :: (a -> b) -> (a -> b)
h x = x


:t h
> A b a. ((b -> a) -> (b -> a))


fun :: a -> a
fun x = sin x
> Type error:
> Expected: Real
>   Actual: a
> In: x
>
> fun x = sin x
>             ^
