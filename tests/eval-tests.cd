:p 1 + 2

> [3]

:p let double = lam x: x * 2
   in double 10

> [20]

:p let x = unpack iota 100
   in sum (for i: x.i)

> [4950]

:p let vdot x y = sum (for i: x.i * y.i * 2);
       x = unpack iota 3
   in vdot x x

> [10]

:p let x = unpack iota 3;
       y = for i j: x.i * x.j
   in sum (for i: sum (y.i))

> [18]

-- :p randint (hash 0 0) 10
-- :p let x = unpack iota 10000;
--        key = hash 0
--    in sum (for i: randint (key x.i) 10)
x = unpack iota 7


f = lam y: sum x + y


:p f 3

> [24]

:p x

> [0, 1, 2, 3, 4, 5, 6]

:p fold (lam x y: x + y) 0 x

> [21]

:p 6 - 10

> [-4]

:p (lam (x, y): x + y) (1, 2)

> [3]

:p let f (x, y) = x y
   in f (lam x: x, 1)

> [1]

:p let (x,y) = ((1,2),3) in
       let (x1, x2) = x in x1 + x2 + y

> [6]

:p let x = (1,2) in
   let (y,z) = x in y + z

> [3]

-- :p let f (x, y) = x + 2 * y;
--        z.i = (x.i, x.i * x.i)
--    in sum (for i: f z.i)
:p exp 1.0

> [2.718281828459045]

:p log 1.0

> [0.0]

:p sqrt 2.0

> [1.4142135623730951]

:p sin 3.14159

> [2.65358979335273e-6]

:p cos 0.0

> [1.0]

:p tan 1.57079

> [158057.9134162482]

:p fadd 1.0 2.0

> [3.0]

:p fsub 1.0 2.0

> [-1.0]

:p fmul 3.0 2.0

> [6.0]

:p fdiv 3.0 2.0

> [1.5]

