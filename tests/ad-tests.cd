
f = lam x. x * x * x

:p jvp f 1.0 1.0

> [3.0]

:p jvp (lam x. jvp f x 1.0) 1.0 1.0

> [6.0]

:p grad f 1.0

> [3.0]

_, nx = unpack range 3

g x = for i::nx. 3.0 * x * x

:p jvp g 2.0 1.0

> [12.0, 12.0, 12.0]

g2 (x, y) = x * y

:p grad g2 (1.0, 2.0)

> ([2.0], [1.0])

xs = for i::nx. real iota.i * 1.0

arrFun c = for i::nx. c

:p let (_, pullback) = vjp arrFun 2.0
   in pullback xs

> [3.0]

:p (transpose vsum  1.5) :: nx=>Real

> [1.5, 1.5, 1.5]

:p jvp vsum xs xs

> [3.0]

:p transpose (lam x. for i. x.i) xs

> [0.0, 1.0, 2.0]
