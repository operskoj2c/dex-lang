fst :: (a, b) -> a
fst (x, y) = x

snd :: (a, b) -> b
snd (x, y) = y

iadd :: Int -> Int -> Int
iadd x y = %iadd(x, y)

isub :: Int -> Int -> Int
isub x y = %isub(x, y)

imul :: Int -> Int -> Int
imul x y = %imul(x, y)

fadd :: Real -> Real -> Real
fadd x y = %fadd(x, y)

fsub :: Real -> Real -> Real
fsub x y = %fsub(x, y)

fmul :: Real -> Real -> Real
fmul x y = %fmul(x, y)

fdiv :: Real -> Real -> Real
fdiv x y = %fdiv(x, y)

pow :: Int -> Int -> Int
pow x y = %pow(x, y)

exp :: Real -> Real
exp x = %%exp(x)

log :: Real -> Real
log x = %%log(x)

sqrt :: Real -> Real
sqrt x = %%sqrt(x)

sin :: Real -> Real
sin x = %%sin(x)

cos :: Real -> Real
cos x = %%cos(x)

tan :: Real -> Real
tan x = %%tan(x)

hash :: Int -> Int -> Int
hash x y = %%threefry2x32(x, y)

asint :: i -> Int
asint i = %asint(i)

asidx :: Int -> i
asidx i = %asidx(i)

ixadd :: i -> Int -> i
ixadd i n = asidx $ iadd (asint i) n

ixsub :: i -> Int -> i
ixsub i n = asidx $ isub (asint i) n

iota :: i=>Int
iota = for i. asint i

range :: Int -> E i. ()
range n = %range(n)

real :: Int -> Real
real x = %inttoreal(x)

b2i :: Bool -> Int
b2i x = %booltoint(x)

filter :: (a -> Bool) -> i=>a -> E j. j=>a
filter f x = %filter(f, x)

scan :: a -> i=>(a->(a, b)) -> (a, i=>b)
scan x0 fs = %scan(x0, for i. lam x. fs.i x)

fold :: a -> i=>(a->a) -> a
fold x0 fs = fst $ scan x0 for i. lam x. (fs.i x, ())

rand :: Int -> Real
rand x = %%randunif(x)

sum :: i=>Real -> Real
sum xs = fold 0.0 for i. let x = xs.i in lam c. c + x

isum :: i=>Int -> Int
isum xs = fold 0 for i. let x = xs.i in lam c. iadd c x

map :: (a -> b) -> i=>a -> i=>b
map f xs = for i. f xs.i

map2 :: (a -> b) -> i=>j=>a -> i=>j=>b
map2 f xs = for i j. f xs.i.j

zip :: i=>a -> i=>b -> i=>(a,b)
zip xs ys = for i. (xs.i, ys.i)

unzip :: i=>(a, b) -> (i=>a, i=>b)
unzip xys = (map fst xys, map snd xys)

-- This would be more natural as a direct type-lambda
size :: i=>a -> Int
size xs = isum (map (lam _. 1) xs) -- TODO: make it a builtin for efficiency

-- TODO: find a way to access the type variable 'i'
linspace :: Int -> Real -> Real -> i=>Real
linspace n low high = let dx = (high - low) / real n
                      in for i. low + real iota.i * dx

-- All of the following have implicit vector space typeclass constraints on `a`
--  and `b`. TODO: make some sort of typeclass system

vzero :: a
vzero = %vzero()

vadd :: a -> a -> a
vadd x y = %vadd(x, y)

vsingle :: i -> a -> i=>a
vsingle i x = %vsingle(i, x)

vsum :: i=>a -> a
vsum xs = %vsum(for i. xs.i)

partialEval :: (a -> b -> (c,d)) -> a -> (c, b -> d)
partialEval f = %partialEval(lam x y. f x y)

deriv :: (a -> b) -> a -> a -> (b, b)
deriv f y t = %deriv(lam x. f x) (y, t)

linearize :: (a -> b) -> a -> (b, a -> b)
linearize f = partialEval (deriv f)

jvp :: (a -> b) -> a -> a -> b
jvp f x t = snd (linearize f x) t

transpose :: (a -> b) -> b -> a
transpose f = %transpose(lam t. f t)

vjp :: (a -> b) -> a -> (b, b -> a)
vjp f x = let (y, df) = linearize f x
          in (y, transpose df)

grad :: (a -> Real) -> a -> a
grad f x = let (_, pullback) = vjp f x
           in pullback 1.0

fanout :: a -> i=>a
fanout x = for i. x

fmulDeriv :: Real -> Real -> (Real, Real -> Real -> Real)
fmulDeriv x y = (x * y, lam tx ty. x * ty + y * tx)

vsumImpl :: i=>a -> a
vsumImpl xs = fold vzero for i. lam c. vadd c xs.i

forUnzip :: i=>(b, a -> b) -> (i=>b, a -> i=>b)
forUnzip xfs = let (xs, fs) = unzip xfs
               in  (xs, lam t. for i. fs.i t)
