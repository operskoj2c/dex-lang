
'File system operations

FilePath : Type = String
data CString = MkCString CharPtr

data StreamMode =
  ReadMode
  WriteMode

data Stream mode:StreamMode = MkStream CharPtr

-- TODO: check the string contains no nulls
def withCString (s:String) (action: CString -> {State World} a) : {State World} a =
  (AsList n s') = s <> (AsList _ "\NUL")
  withTabPtr s' \(MkPtr ptr). action $ MkCString ptr

def fopen (path:String) (mode:StreamMode) : {State World} (Stream mode) =
  modeStr = AsList _ case mode of
    ReadMode  -> "r"
    WriteMode -> "w"
  withCString path \(MkCString pathPtr).
    withCString modeStr \(MkCString modePtr).
      MkStream $ %ffi fopen CharPtr pathPtr modePtr

def fclose (mode:StreamMode) ?-> (stream:Stream mode) : {State World} Unit =
  (MkStream stream') = stream
  %ffi fclose Int64 stream'
  ()

def fwrite (stream:Stream WriteMode) (s:String) : {State World} Unit =
  (MkStream stream') = stream
  (AsList n s') = s
  withTabPtr s' \(MkPtr ptr).
    %ffi fwrite Int64 ptr (IToI64 1) (IToI64 n) stream'
  %ffi fflush Int64 stream'
  ()

def fread (stream:Stream ReadMode) : {State World} String =
  (MkStream stream') = stream
  -- TODO: allow reading longer files!
  n = 4096
  withAlloc n \ptr:(Ptr Char).
    (MkPtr rawPtr) = ptr
    numRead = I64ToI $ %ffi fread Int64 rawPtr (IToI64 1) (IToI64 n) stream'
    stringFromCharPtr numRead ptr

def deleteFile (f:FilePath) : {State World} Unit =
  withCString f \(MkCString ptr).
    %ffi remove Int64 ptr
  ()

def withFile (f:FilePath) (mode:StreamMode)
      (action: Stream mode -> {State World} a)
      : {State World} a =
  stream = fopen f mode
  result = action stream
  fclose stream
  result

def writeFile (f:FilePath) (s:String) : {State World} Unit =
  withFile f WriteMode \stream. fwrite stream s

def readFile (f:FilePath) : {State World} String =
  withFile f ReadMode \stream. fread stream

def writeTemp (s:String) : {State World} FilePath =
  -- TODO: Make this properly atomic. It can fail if another process creates a
  -- file with same name after we ask for the name and before we create it.
  withCString (AsList _ "/tmp/dex-XXXXXX") \(MkCString ptr).
    %ffi mktemp CharPtr ptr
    stringFromCharPtr 15 (MkPtr ptr)

def withTempFile (action: FilePath -> {State World} a) : {State World} a =
  tmpFile = writeTemp (AsList _ [])
  result = action tmpFile
  deleteFile tmpFile
  result

def getOutputStream (_:Unit) : {State World} Stream WriteMode =
  MkStream $ %ptrLoad OUT_STREAM_PTR

def print (s:String) : {State World} Unit =
  fwrite (getOutputStream ()) (s <> AsList _ "\n")
