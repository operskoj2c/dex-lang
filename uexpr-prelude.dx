'## Dex prelude

'Runs before every Dex program unless an alternative is provided with `--prelude`.

'Wrappers around primitives

Int  = %Int
Real = %Real
Bool = %Bool
Unit = %UnitType
Type = %TyKind
Effects = %EffKind

def (&) (a:Type) (b:Type) : Type = %PairType a b
def (,) (x:a) (y:b) : a & b = %pair x y
def fst (p: a & b) : a = %fst p
def snd (p: a & b) : b = %snd p

def iadd (x:Int) (y:Int) : Int = %iadd x y
def isub (x:Int) (y:Int) : Int = %isub x y
def imul (x:Int) (y:Int) : Int = %imul x y
def idiv (x:Int) (y:Int) : Int = %idiv x y
def rem  (x:Int) (y:Int) : Int = %rem  x y
def ipow (x:Int) (y:Int) : Int = %pow  x y

def (+) (x:Real) (y:Real) : Real = %fadd x y
def (-) (x:Real) (y:Real) : Real = %fsub x y
def (*) (x:Real) (y:Real) : Real = %fmul x y
def (/) (x:Real) (y:Real) : Real = %fdiv x y
def neg (x:Real)          : Real = %fneg x

-- TODO: typeclasses!
def (==) (x:a) (y:a) : Bool = %eq        x y
def (<)  (x:a) (y:a) : Bool = %less      x y
def (<=) (x:a) (y:a) : Bool = %lessEq    x y
def (>)  (x:a) (y:a) : Bool = %greater   x y
def (>=) (x:a) (y:a) : Bool = %greaterEq x y

def select (p:Bool) (x:a) (y:a) : a = %select p x y

True  = %True
False = %False
def (&&) (x:Bool) (y:Bool) : Bool = %and x y
def (||) (x:Bool) (y:Bool) : Bool = %or  x y
def not  (x:Bool)          : Bool = %not x

def i2r (x:Int ) : Real = %inttoreal x
def b2i (x:Bool) : Int  = %booltoint x
def todo (a:Type) ?-> : a = %todo a

'Effects

def Ref (r:Type) (a:Type) : Type = %Ref r a
def get  (ref:Ref h s)       : {State h} s    = %get  ref
def (:=) (ref:Ref h s) (x:s) : {State h} Unit = %put  ref x
def ask  (ref:Ref h r)       : {Read  h} r    = %ask  ref
def (+=) (ref:Ref h w) (x:w) : {Accum h} Unit = %tell ref x
def (!)  (ref:Ref h (n=>a)) (i:n) : Ref h a = %indexRef ref i

def withReader
      (eff:Effects) ?-> (a:Type) ?-> (r:Type) ?->
      (init:r) (action: (h:Type ?-> Ref h r -> {Read h|eff} a))
      : {|eff} a =
    def explicitAction (h':Type) (ref:Ref h' r) : {Read h'|eff} a = action ref
    %runReader init explicitAction

def withAccum
      (eff:Effects) ?-> (a:Type) ?-> (w:Type) ?->
      (action: (h:Type ?-> Ref h w -> {Accum h|eff} a))
      : {|eff} (a & w) =
    def explicitAction (h':Type) (ref:Ref h' w) : {Accum h'|eff} a = action ref
    %runWriter explicitAction

def withState
      (eff:Effects) ?-> (a:Type) ?-> (s:Type) ?->
      (init:s)
      (action: (h:Type ?-> Ref h s -> {State h |eff} a))
      : {|eff} (a & s) =
    def explicitAction (h':Type) (ref:Ref h' s) : {State h'|eff} a = action ref
    %runState init explicitAction

'Wrappers around C library functions

def exp (x:Real) : Real = %ffi exp Real x
def log (x:Real) : Real = %ffi log Real x
def sin (x:Real) : Real = %ffi sin Real x
def cos (x:Real) : Real = %ffi cos Real x
def tan (x:Real) : Real = %ffi tan Real x
def sqrt (x:Real) : Real = %ffi sqrt Real x
def floor (x:Real) : Int = %ffi floorDex Int x

'Working with index sets

def Range (low:Int) (high:Int) : Type = %IntRange low high
def Fin (n:Int) : Type = Range 0 n
def asint (i:a) : Int = %asint i
def size (n:Type) : Int = %idxSetSize n
def asidx (n:Type) (i:Int) : n = %asidx n i
def ixadd (n:Type) ?-> (i:n) (x:Int) : n = asidx n $ iadd (asint i) x
def ixsub (n:Type) ?-> (i:n) (x:Int) : n = asidx n $ isub (asint i) x

'Misc

pi : Real = 3.141592653589793

def id (x:a) : a = x
def dup (x:a) : (a & a) = (x, x)
-- TODO: unpack pair in args once we fix the bug
def swap (p:a&b) : (b&a) = (snd p, fst p)
def map (f:a->{|eff} b) (xs: n=>a) : {|eff} (n=>b) = for i. f xs.i
def zip (xs:n=>a) (ys:n=>b) : (n=>(a&b)) = for i. (xs.i, ys.i)
def unzip (xys:n=>(a&b)) : (n=>a & n=>b) = (map fst xys, map snd xys)
def fanout (n:Type) ?-> (x:a) : n=>a = for i. x
def sq (x:Real) : Real = x * x
def abs (x:Real) : Real = select (x > 0.0) x (0.0 - x)
def compose (f:b->c) (g:a->b) (x:a) : c = f (g x)

def scan (init:a) (body:n->a->(a&b)) : (a & n=>b) =
  swap $ withState init \s. for i.
    c = get s
    (c', y) = body i c
    s := c'
    y

def fold (init:a) (body:(n->a->a)) : a = fst $ scan init \i x. (body i x, ())
-- TODO: call this `scan` and call the current `scan` something else
def scan' (init:a) (body:n->a->a) : n=>a = snd $ scan init \i x. dup (body i x)
-- TODO: allow tables-via-lambda and get rid of this
def fsum (xs:n->Real) : Real = snd $ withAccum \ref. for i. ref += xs i
def sum  (xs:n=>Real) : Real = snd $ withAccum \ref. for i. ref += xs.i
def isum (xs:n=>Int) : Int = fold 0 \i c. iadd c xs.i
def mean (n:Type) ?-> (xs:n=>Real) : Real = sum xs / i2r (size n)
def std (xs:n=>Real) : Real = sqrt $ mean (map sq xs) - sq (mean xs)

def linspace (n:Type) (low:Real) (high:Real) : n=>Real =
  dx = (high - low) / i2r (size n)
  for i:n. low + i2r (asint i) * dx

def transpose (x:n=>m=>Real) : m=>n=>Real = for i j. x.j.i
def vdot (x:n=>Real) (y:n=>Real) : Real = fsum \i. x.i * y.i

def mmp (x:l=>m=>Real) (y:m=>n=>Real) : (l=>n=>Real) =
  y' = transpose y
  for i k. fsum \j. x.i.j * y'.k.j

def mvp (mat:n=>m=>Real) (v:m=>Real) : n=>Real =
  for i. vdot mat.i v

def inner (x:n=>Real) (mat:n=>m=>Real) (y:m=>Real) : Real =
  fsum \(i,j). x.i * mat.i.j * y.j

'Functions for working with the pseudorandom number generator

-- TODO: newtype
Key = Int

def hash (x:Key) (y:Int) : Key = %ffi threefry2x32 Int x y
def newKey (x:Int) : Key = hash 0 x
def splitKey (k:Key) : (Key & Key) = (hash k 0, hash k 1)
def splitKey3 (k:Key) : (Key & Key & Key) =
  (k1, k') = splitKey k
  (k2, k3) = splitKey k'
  (k1, k2, k3)

def many (f:Key->a) (k:Key) (i:n) : a = f (hash k (asint i))
def ixkey (k:Key) (i:n) : Key = hash k (asint i)
def rand (k:Key) : Real = %ffi randunif Real k

def randn (k:Key) : Real =
  (k1, k2) = splitKey k
  u1 = rand k1
  u2 = rand k2
  -- TODO: parsing negative numbers
  sqrt ((0.0-2.0) * log u1) * cos (2.0 * pi * u2)

def randIdx (n:Type) ?-> (k:Key) : n =
  unif = rand k
  asidx n $ floor $ unif * i2r (size n)

'Automatic differentiation

def linearize (f:a->b) (x:a) : (b & a --o b) = %linearize f x
def jvp (f:a->b) (x:a) (t:a) --o : b = snd (linearize f x) t
def transposeLinear (f:a --o b) : b --o a = %linearTranspose f

def vjp (f:a->b) (x:a) : (b & b --o a) =
  (y, df) = linearize f x
  (y, transposeLinear df)

def grad (f:a->Real) (x:a) : a = snd (vjp f x) 1.0

def deriv (f:Real->Real) (x:Real) : Real = jvp f x 1.0

def derivRev (f:Real->Real) (x:Real) : Real = snd (vjp f x) 1.0

def checkDerivBase (f:Real->Real) (x:Real) : Bool =
  -- TODO: parse 1e-5
  eps = 0.00005
  ansFwd  = deriv    f x
  ansRev  = derivRev f x
  ansNumeric = (f (x + eps) - f (x - eps)) / (2. * eps)
  isClose = \a b. abs (a - b) < 0.001
  isClose ansFwd ansNumeric && isClose ansRev ansNumeric

def checkDeriv (f:Real->Real) (x:Real) : Bool =
  checkDerivBase f x && checkDerivBase (deriv f) x
